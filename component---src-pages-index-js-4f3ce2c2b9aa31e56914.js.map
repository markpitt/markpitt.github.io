{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/utils/typography.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/layout.js","webpack:///./src/components/seo.js","webpack:///./src/components/bio.js"],"names":["BlogIndex","render","data","this","props","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","edges","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_components_layout__WEBPACK_IMPORTED_MODULE_4__","location","_components_seo__WEBPACK_IMPORTED_MODULE_5__","keywords","_components_bio__WEBPACK_IMPORTED_MODULE_3__","map","_ref","node","frontmatter","fields","slug","key","style","marginBottom","rhythm","gatsby__WEBPACK_IMPORTED_MODULE_2__","boxShadow","to","date","dangerouslySetInnerHTML","__html","description","excerpt","React","Component","pageQuery","__webpack_require__","d","__webpack_exports__","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","StaticQueryContext","createContext","Consumer","staticQueryData","query","children","propTypes","PropTypes","object","string","isRequired","func","scale","typography__WEBPACK_IMPORTED_MODULE_0__","typography__WEBPACK_IMPORTED_MODULE_0___default","typography_theme_irving__WEBPACK_IMPORTED_MODULE_1__","typography_theme_irving__WEBPACK_IMPORTED_MODULE_1___default","Irving","googleFonts","name","styles","bodyFontFamily","typography","Typography","m","module","exports","require","default","ProdPageRenderer","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","Object","assign","json","shape","Layout","header","_this$props","react__WEBPACK_IMPORTED_MODULE_4___default","paddingBottom","getLogo","marginTop","display","verticalAlign","gatsby__WEBPACK_IMPORTED_MODULE_5__","textDecoration","color","marginLeft","marginRight","maxWidth","padding","Date","getFullYear","href","width","height","radius","gatsby_image__WEBPACK_IMPORTED_MODULE_6___default","fixed","logo","childImageSharp","minWidth","minHeight","borderRadius","_public_static_d_3209226101_json__WEBPACK_IMPORTED_MODULE_3__","SEO","lang","meta","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","content","property","author","concat","length","join","defaultProps","array","arrayOf","bioQuery","Bio","react__WEBPACK_IMPORTED_MODULE_2___default","gatsby__WEBPACK_IMPORTED_MODULE_3__","_data$site$siteMetada","social","gatsby_image__WEBPACK_IMPORTED_MODULE_4___default","avatar","alt","imgStyle","twitter","github","_public_static_d_3798617220_json__WEBPACK_IMPORTED_MODULE_1__"],"mappings":"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","file":"component---src-pages-index-js-4f3ce2c2b9aa31e56914.js","sourcesContent":["import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { rhythm } from \"../utils/typography\"\n\nclass BlogIndex extends React.Component {\n  render() {\n    const { data } = this.props\n    const siteTitle = data.site.siteMetadata.title\n    const posts = data.allMarkdownRemark.edges\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO\n          title=\"All posts\"\n          keywords={[`blog`, `gatsby`, `javascript`, `react`]}\n        />\n        <Bio />\n        {posts.map(({ node }) => {\n          const title = node.frontmatter.title || node.fields.slug\n          return (\n            <div key={node.fields.slug}>\n              <h3\n                style={{\n                  marginBottom: rhythm(1 / 4),\n                }}\n              >\n                <Link style={{ boxShadow: `none` }} to={node.fields.slug}>\n                  {title}\n                </Link>\n              </h3>\n              <small>{node.frontmatter.date}</small>\n              <p\n                dangerouslySetInnerHTML={{\n                  __html: node.frontmatter.description || node.excerpt,\n                }}\n              />\n            </div>\n          )\n        })}\n      </Layout>\n    )\n  }\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC },\n      filter: {frontmatter: {draft: {eq: false}}}\n      ) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n          }\n        }\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","import Typography from \"typography\"\nimport Irving from \"typography-theme-irving\"\n\nIrving.googleFonts = [\n  {\n    name: \"Exo\",\n    styles: [\"400\", \"700\"],\n  },\n]\nIrving.bodyFontFamily = [\"Exo\", \"sans-serif\"]\n\n// delete Wordpress2016.googleFonts\n\nconst typography = new Typography(Irving)\n\n// Hot reload typography in development.\nif (process.env.NODE_ENV !== `production`) {\n  typography.injectStyles()\n}\n\nexport default typography\nexport const rhythm = typography.rhythm\nexport const scale = typography.scale\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from \"react\"\nimport { Link, graphql, StaticQuery } from \"gatsby\"\nimport Image from \"gatsby-image\"\n\nimport { rhythm, scale } from \"../utils/typography\"\n\nclass Layout extends React.Component {\n  render() {\n    const { location, title, children } = this.props\n    const rootPath = `${__PATH_PREFIX__}/`\n    let header\n\n    if (location.pathname === rootPath) {\n      header = (\n        <div\n          style={{\n            paddingBottom: rhythm(1.5),\n          }}\n        >\n          {this.getLogo(50, 50, 10)}\n          <h1\n            style={{\n              ...scale(1.25),\n              marginBottom: 0,\n              marginTop: 0,\n              display: `inline-block`,\n              verticalAlign: `middle`,\n            }}\n          >\n            <Link\n              style={{\n                boxShadow: `none`,\n                textDecoration: `none`,\n                color: `inherit`,\n              }}\n              to={`/`}\n            >\n              {title}\n            </Link>\n          </h1>\n        </div>\n      )\n    } else {\n      header = (\n        <div\n          style={{\n            paddingBottom: rhythm(1),\n          }}\n        >\n          {this.getLogo(25, 25, 5)}\n          <h3\n            style={{\n              marginTop: 0,\n              marginBottom: 0,\n              display: `inline-block`,\n              verticalAlign: `middle`,\n            }}\n          >\n            <Link\n              style={{\n                boxShadow: `none`,\n                textDecoration: `none`,\n                color: `inherit`,\n              }}\n              to={`/`}\n            >\n              {title}\n            </Link>\n          </h3>\n        </div>\n      )\n    }\n    return (\n      <div\n        style={{\n          marginLeft: `auto`,\n          marginRight: `auto`,\n          maxWidth: rhythm(24),\n          padding: `${rhythm(1.5)} ${rhythm(3 / 4)}`,\n        }}\n      >\n        <header>{header}</header>\n        <main>{children}</main>\n        <footer>\n          © {new Date().getFullYear()}, Built with\n          {` `}\n          <a href=\"https://www.gatsbyjs.org\">Gatsby</a>\n        </footer>\n      </div>\n    )\n  }\n\n  getLogo(width, height, radius) {\n    return (\n      <StaticQuery\n        query={graphql`\n          query {\n            logo: file(absolutePath: { regex: \"/logo.png/\" }) {\n              childImageSharp {\n                fixed(width: 100, height: 100) {\n                  ...GatsbyImageSharpFixed\n                }\n              }\n            }\n          }\n        `}\n        render={data => (\n          <Image\n            fixed={data.logo.childImageSharp.fixed}\n            style={{\n              marginRight: rhythm(1 / 2),\n              marginBottom: 0,\n              minWidth: 25,\n              minHeight: 25,\n              borderRadius: radius,\n              width: width,\n              height: height,\n              display: `inline-block`,\n              verticalAlign: `middle`,\n            }}\n          />\n        )}\n      />\n    )\n  }\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n                name: `keywords`,\n                content: keywords.join(`, `),\n              }\n            : []\n        )\n        .concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","/**\n * Bio component that queries for data\n * with Gatsby's StaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/static-query/\n */\n\nimport React from \"react\"\nimport { StaticQuery, graphql } from \"gatsby\"\nimport Image from \"gatsby-image\"\n\nimport { rhythm } from \"../utils/typography\"\n\nfunction Bio() {\n  return (\n    <StaticQuery\n      query={bioQuery}\n      render={data => {\n        const { author, social } = data.site.siteMetadata\n        return (\n          <div\n            style={{\n              display: `flex`,\n              marginBottom: rhythm(2.5),\n            }}\n          >\n            <Image\n              fixed={data.avatar.childImageSharp.fixed}\n              alt={author}\n              style={{\n                marginRight: rhythm(1 / 2),\n                marginBottom: 0,\n                minWidth: 50,\n                borderRadius: `100%`,\n              }}\n              imgStyle={{\n                borderRadius: `50%`,\n              }}\n            />\n            <p>\n              Written by <strong>{author}</strong> who lives in Bridgnorth and works in Bristol building useful things.\n              {` `}\n              <a href={`https://twitter.com/${social.twitter}`}>\n                You should follow him on Twitter\n              </a>,\n              <a href={`https://github.com/${social.github}`}>or see what he does on GitHub</a>\n            </p>\n          </div>\n        )\n      }}\n    />\n  )\n}\n\nconst bioQuery = graphql`\n  query BioQuery {\n    avatar: file(absolutePath: { regex: \"/profile-pic.jpg/\" }) {\n      childImageSharp {\n        fixed(width: 50, height: 50) {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n    site {\n      siteMetadata {\n        author\n        social {\n          twitter\n          github\n        }\n      }\n    }\n  }\n`\n\nexport default Bio\n"],"sourceRoot":""}